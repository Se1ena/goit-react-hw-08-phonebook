{"version":3,"file":"static/js/609.e5be544c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","Pages/Phonebook.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filters.name;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.trim().toLowerCase();\n\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    const inAlphabeticalOrder = filteredContacts.sort(\n      (firstContact, secondContact) =>\n        firstContact.name.localeCompare(secondContact.name)\n    );\n\n    return inAlphabeticalOrder;\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 20px;\n  border: 1px solid gray;\n`;\n\nexport const Btn = styled.button`\n  max-width: 100px;\n  margin-top: 10px;\n  padding: 5px;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  background-color: #80808061;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  gap: 35px;\n  font-size: 15px;\n  font-weight: 600;\n`;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Form, Btn, Label } from 'components/ContactForm/ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log(`Error in ${e.target.name}`);\n    }\n  };\n\n  const addNewContact = (name, number) => {\n    if(checkDoubleContact(name)) {\n      alert(`${name} is already in your contacts!`);\n      return;\n    }\n    const newContact = {\n      name,\n      phone: number,\n    };\n    dispatch(addContact(newContact));\n  }\n\n  const checkDoubleContact = (name) => {\n    return contacts.find(contact => contact.name === name);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    addNewContact(name, number);\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <Form onSubmit={handleFormSubmit}>\n      <Label>\n        <div>Name</div>\n        <input\n        value={name}\n        onChange={handleInputChange}\n          name=\"name\"\n          type=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required={true}\n          placeholder=\"Enter name\"\n        />\n      </Label>\n      <Label>\n        <div>Number</div>\n        <input\n        value={number}\n        onChange={handleInputChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required={true}\n          placeholder=\"Enter phone number\"\n        />\n      </Label>\n      <Btn type=\"submit\">Add contact</Btn>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState, useRef } from 'react';\nimport {\n  useDisclosure,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Box,\n  Button,\n  Heading,\n  Text,\n} from '@chakra-ui/react';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef();\n\n  const handleDelete = () => {\n    setIsDeleting(true);\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n      <Box>\n        <Heading size=\"xs\" textTransform=\"uppercase\">\n          {name}\n        </Heading>\n        <Text pt=\"1\" fontSize=\"sm\">\n          {number}\n        </Text>\n      </Box>\n\n      <Button\n        colorScheme=\"red\"\n        variant=\"outline\"\n        size=\"xs\"\n        type=\"button\"\n        onClick={onOpen}\n        disabled={isDeleting}\n      >\n        {isDeleting ? 'Deleting...' : 'Delete'}\n      </Button>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete Contact\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button colorScheme=\"red\" onClick={handleDelete} ml={3}>\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </Box>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default Contact;","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport Contact from '../ContactItem/ContactItem';\nimport { Stack, StackDivider } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Stack divider={<StackDivider />} spacing=\"4\">\n      {contacts.map(contact => (\n        <Contact key={contact.id} {...contact} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default ContactList;","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { setNameFilter } from '../../redux/fiters/filtersSlice';\nimport { Box, Input } from '@chakra-ui/react';\nimport { FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setNameFilter(e.target.value));\n  };\n\n  // do not show filter without contacts\n  if (contacts.length === 0) {\n    return null;\n  }\n\n  return (\n    <Box my={5}>\n      <FormLabel htmlFor=\"nameFilter\">Find contacts by name</FormLabel>\n      <Input\n        id=\"nameFilter\"\n        name=\"name\"\n        label=\"Email\"\n        onChange={handleChange}\n        autoComplete=\"off\"\n        type=\"search\"\n      />\n    </Box>\n  );\n};\n\nexport default Filter;","import {Helmet } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoading } from '../redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport {selectVisibleContacts} from '../redux/contacts/selectors';\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Heading,\n  Grid,\n  GridItem,\n  Spinner,\n} from '@chakra-ui/react';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <Grid templateColumns=\"repeat(auto-fill, minmax(320px, 1fr))\" gap={4}>\n        <GridItem>\n          <Card pos=\"sticky\" top=\"1rem\">\n            <CardHeader>\n              <Heading size=\"md\">New contact</Heading>\n            </CardHeader>\n            <CardBody pt={0}>\n              <ContactForm />\n            </CardBody>\n          </Card>\n        </GridItem>\n\n        <GridItem>\n          <Card minH=\"100%\">\n            <CardHeader pb={0}>\n              <Heading size=\"md\" display=\"flex\" alignItems=\"center\">\n                Contacts ({contacts.length}){' '}\n                {isLoading && <Spinner size=\"sm\" color=\"purple.500\" ml={2} />}\n              </Heading>\n            </CardHeader>\n\n            <CardBody pt={0}>\n              <Filter />\n              <ContactList />\n            </CardBody>\n          </Card>\n        </GridItem>\n      </Grid>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectLoading","isLoading","selectVisibleContacts","createSelector","filters","name","filter","normalizedFilter","trim","toLowerCase","contact","includes","sort","firstContact","secondContact","localeCompare","Form","styled","Btn","Label","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","e","target","value","console","log","checkDoubleContact","find","onSubmit","preventDefault","alert","newContact","phone","addContact","addNewContact","onChange","type","pattern","title","required","placeholder","id","isDeleting","setIsDeleting","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","display","alignItems","justifyContent","size","textTransform","pt","fontSize","colorScheme","variant","onClick","disabled","leastDestructiveRef","fontWeight","ref","deleteContact","ml","divider","spacing","map","length","my","htmlFor","I","label","setNameFilter","autoComplete","Phonebook","useEffect","fetchContacts","templateColumns","gap","pos","top","minH","pb","color"],"sourceRoot":""}